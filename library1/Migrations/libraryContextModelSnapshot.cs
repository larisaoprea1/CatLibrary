// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using library1.Models;

#nullable disable

namespace library1.Migrations
{
    [DbContext(typeof(libraryContext))]
    partial class libraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("library1.Models.author", b =>
                {
                    b.Property<int>("authorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("authorID"), 1L, 1);

                    b.Property<string>("author_firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author_lastname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("authorID");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("library1.Models.book", b =>
                {
                    b.Property<int>("bookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookID"), 1L, 1);

                    b.Property<int>("authorID")
                        .HasColumnType("int");

                    b.Property<string>("book_pages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("book_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cover_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genreID")
                        .HasColumnType("int");

                    b.Property<int>("mainGenreID")
                        .HasColumnType("int");

                    b.Property<string>("placeHolded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("typeOfBookID")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("bookID");

                    b.HasIndex("authorID");

                    b.HasIndex("genreID");

                    b.HasIndex("mainGenreID");

                    b.HasIndex("typeOfBookID");

                    b.ToTable("books");
                });

            modelBuilder.Entity("library1.Models.favoriteBooks", b =>
                {
                    b.Property<int>("bookID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("bookID", "userID");

                    b.HasIndex("userID");

                    b.ToTable("favoriteBooks");
                });

            modelBuilder.Entity("library1.Models.genre", b =>
                {
                    b.Property<int>("genreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genreID"), 1L, 1);

                    b.Property<string>("genre_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("genreID");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("library1.Models.mainGenre", b =>
                {
                    b.Property<int>("mainGenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mainGenreID"), 1L, 1);

                    b.Property<string>("mainGenre_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mainGenreID");

                    b.ToTable("mainGenres");
                });

            modelBuilder.Entity("library1.Models.placeHoldBooks", b =>
                {
                    b.Property<int>("bookID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("bookID", "userID");

                    b.HasIndex("userID");

                    b.ToTable("placeHoldBooks");
                });

            modelBuilder.Entity("library1.Models.typeOfBook", b =>
                {
                    b.Property<int>("typeOfBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("typeOfBookID"), 1L, 1);

                    b.Property<string>("typeOfBook_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typeOfBookID");

                    b.ToTable("typeOfBooks");
                });

            modelBuilder.Entity("library1.Models.user", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"), 1L, 1);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("library1.Models.book", b =>
                {
                    b.HasOne("library1.Models.author", "authors")
                        .WithMany("books")
                        .HasForeignKey("authorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library1.Models.genre", "genres")
                        .WithMany("books")
                        .HasForeignKey("genreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library1.Models.mainGenre", "mainGenres")
                        .WithMany("books")
                        .HasForeignKey("mainGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library1.Models.typeOfBook", "typeOfBooks")
                        .WithMany("books")
                        .HasForeignKey("typeOfBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authors");

                    b.Navigation("genres");

                    b.Navigation("mainGenres");

                    b.Navigation("typeOfBooks");
                });

            modelBuilder.Entity("library1.Models.favoriteBooks", b =>
                {
                    b.HasOne("library1.Models.book", "book")
                        .WithMany("favoriteBooks")
                        .HasForeignKey("bookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library1.Models.user", "user")
                        .WithMany("favoriteBooks")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("library1.Models.placeHoldBooks", b =>
                {
                    b.HasOne("library1.Models.book", "book")
                        .WithMany("placeHoldBooks")
                        .HasForeignKey("bookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library1.Models.user", "user")
                        .WithMany("placeHoldBooks")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("book");

                    b.Navigation("user");
                });

            modelBuilder.Entity("library1.Models.author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("library1.Models.book", b =>
                {
                    b.Navigation("favoriteBooks");

                    b.Navigation("placeHoldBooks");
                });

            modelBuilder.Entity("library1.Models.genre", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("library1.Models.mainGenre", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("library1.Models.typeOfBook", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("library1.Models.user", b =>
                {
                    b.Navigation("favoriteBooks");

                    b.Navigation("placeHoldBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
